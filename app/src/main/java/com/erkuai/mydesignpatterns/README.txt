可维护、可复用、可扩展，灵活性好
通过封装、继承、多态把程序的耦合度降低，使用设计模式使得程序更加灵活，容易修改，并且易于复用

单一职责原则：就一个类而言，应该仅有一个引起它变化的原因
开放封闭原则：类、模块、函数等，应该可以扩展，但是（原来的代码尽可能）不可以修改
依赖倒置原则：抽象不应该依赖细节，细节应该依赖于抽象
里氏替换原则：把父类替换成它的子类，程序的行为没有变化->使得父类可以复用，而子类可以增加新的行为
迪米特法则：如果两个类不必彼此直接通信，那么这两个类就不应该发生直接的相互作用。如果其中一个类需要调用另一个
            类的某一个方法的话，可以通过第三者转发这个调用
合成/聚合复用原则：尽量使用合成/聚合，尽量不要使用类继承


01  简单工厂模式
        解决对象的创建问题
02  策略模式
        解决算法的时常变动问题
？03  装饰模式
        动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活
        优点：把每个要装饰的功能放在单独的类中，并让这类包装它所要装饰的对象，可以简化原有的类
04  代理模式
        为其他对象提供一种代理以控制对这个对象的访问
05  工厂方法模式：
        简单工厂的最大优点在于工厂类中包含了必要的逻辑判断，根据客户端的选择条件动态实例化相关的类，调用的时候，去除了与具体产品的依赖
        简单工厂的修改违背了开放封闭原则
        工厂方法模式，定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使用一个类的实例化延迟到其子类。
06  原型模式：
        用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。
        不用重新初始化对象，而是动态地获得对象运行时的状态
07  模版方法模式：
        定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模版方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤
08  外观模式：
        为子系统中的一组接口提供一个一致的调用，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用
09  建造者模式：
        将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示
10  观察者模式：
        定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通知
            所有观察者对象，使它们能够自动更新自己
        观察者模式的不足？
11  抽象工厂模式：
        提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类
        优点：1、2、
        缺点：增加一个业务，就要增加好几个类
        用反射来帮助克服抽象工厂模式的先天不足（利用反射可以解决避免分支判断的问题）
12  状态模式：
        当一个对象的内在状态改变时，允许改变其行为，这个对象看起来像是改变了其类
        状态模式主要解决的是当控制一个对象状态转换的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的
            一系列类当中，可以把复杂的判断逻辑简化
        优点：通过把状态转移的逻辑分布到State的子类之间，来减少相互间的依赖
        作用：当一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为时，就可以考虑使用
13  适配器模式：
        将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作
14  备忘录模式：
        在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可以将该对象恢复到原先保存的状态。
15  组合模式：
        将对象组合成树形结构以表示"部分-整体"的层次结构。组合模式使得用户对单个对象和组合对象的使用性具有一致性
        优点：基本对象可以被组合成更复杂的组合对象，而这个组合对象又可以被组合，这样不断地递归下去，客户端代码中，任何用到基本对象的
            地方都可以使用组合对象
16  迭代器模式：
        提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示
        优点：可以实现多种迭代方式，它分离了集合对象的遍历行为，抽象出一个迭代器来负责，这样既可以做到不暴露集合的内部结构，
            又可以让外部代码透明地访问集合内部的数据
17  单例模式：
        保证一个类仅有一个实例，并提供一个访问它的全局访问点
18  桥接模式：
        将抽象部分与它的实现部分分离，使它们都可以独立地变化
19  命令模式：
        将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作
20  责任链模式：
        使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，
            直到有一个对象处理它为止
21  中介者模式：
        用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变
            它们之间的交互
22  享元模式：
        运用共享技术有效地支持大量细粒度的对象
23  解释器模式：
        给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。
        解决的是:如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。这样就可以
            构建一个解释器，该解释器通过解释这些句子来解决该问题
24  访问者模式：
        表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。
        目的：把处理从数据结构中分离出来




利用反射可以解决避免分支判断的问题？



